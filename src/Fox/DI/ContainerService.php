<?php
/*
 * MIT License
 *
 * Copyright (c) 2020 Petr Ploner <petr@ploner.cz>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace Fox\DI;


use Exception;
use Fox\Config\AppConfiguration;
use Fox\Config\ContainerConfiguration;
use FoxContainerHelper;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;
use Psr\Container\ContainerInterface;
use ReflectionClass;

class ContainerService
{
    const CONTAINER_CACHE = 'FoxContainerHelper.php';

    private AppConfiguration $appConfiguration;
    private ContainerConfiguration $containerConfiguration;

    public function __construct(AppConfiguration $appConfiguration,
                                ContainerConfiguration $containerConfiguration,)
    {
        $this->appConfiguration = $appConfiguration;
        $this->containerConfiguration = $containerConfiguration;
    }

    public function initContainer(): ContainerInterface
    {
        if (!$this->containerHelperExists()) {
            $this->generateContainerHelper();
        }

        require_once $this->getContainerHelperPath();
        $containerHelper = new FoxContainerHelper($this->appConfiguration);

        return new FoxContainer($containerHelper, $this->containerConfiguration, $this->appConfiguration);
    }

    private function containerHelperExists(): bool
    {
        if ($this->appConfiguration->isDebug()) {
            return false;
        }

        return $this->containerHelperFileExists();
    }

    private function containerHelperFileExists(): bool
    {
        return file_exists($this->getContainerHelperPath());
    }

    private function getContainerHelperPath(): string
    {
        if (str_starts_with($this->appConfiguration->getTmpDir(), '/')) {
            return $this->appConfiguration->getTmpDir() . '/' . self::CONTAINER_CACHE;
        }

        return
            $this->appConfiguration->getBaseDir() . '/' .
            $this->appConfiguration->getTmpDir() . '/' .
            self::CONTAINER_CACHE;
    }

    private function generateContainerHelper(): void
    {
        $this->deleteOldContainerHelper();

        $file = new PhpFile();
        $file->setStrictTypes();
        $namespace = $file->addNamespace('');
        $class = $namespace->addClass('FoxContainerHelper');
        $construct = $class->addMethod('__construct');
        $construct->addPromotedParameter('appConfig')
            ->setType(AppConfiguration::class)
            ->setPrivate();
        $file->addComment(FactoryBuilder::LICENSE_TEXT);
        $file->addComment('This file is auto-generated by Fox Framework, do not change the content manually!');


        $foxServices = FactoryBuilder::getServices(__DIR__ . '/../Sources');
        $services = FactoryBuilder::getServices($this->appConfiguration->getSrcDir());

        $foxInterfaces = [];
        /** @var ReflectionClass $service */
        foreach ($foxServices as $service) {
            $foxInterfaces = FactoryBuilder::addInterfaces($service, $foxInterfaces);
        }

        $mappedInterfaces = [];
        /** @var ReflectionClass $service */
        foreach ($services as $service) {
            $mappedInterfaces = FactoryBuilder::addInterfaces($service, $mappedInterfaces);
        }

        list($foxServicesNames, $foxControllersNames, $foxCommandsNames) = $this->addServicesFactories($foxServices, $foxInterfaces, $class);
        list($servicesNames, $controllersNames, $commandsNames) = $this->addServicesFactories($services, $mappedInterfaces, $class);

        $class->addProperty('serviceNames', array_merge($foxServicesNames, $servicesNames))
            ->setType('array')
            ->setStatic();
        $class->addProperty('controllerNames', array_merge($foxControllersNames, $controllersNames))
            ->setType('array')
            ->setStatic();
        $class->addProperty('commandNames', array_merge($foxCommandsNames, $commandsNames))
            ->setType('array')
            ->setStatic();
        $this->saveGeneratedHelper($file);
    }

    private function saveGeneratedHelper(PhpFile $file): void
    {
        $printer = new PsrPrinter();
        try {
            file_put_contents($this->getContainerHelperPath(), $printer->printFile($file));
        } catch (Exception $e) {
            throw new ContainerGeneratorException(
                'Fox Framework do not have permissions to do changes in 
                application tmp folder! Please check the permissions');
        }
    }

    private function addServicesFactories(array $services, array $mappedInterfaces, ClassType $class): array
    {
        $servicesNames = [];
        $controllersNames = [];
        $commandsNames = [];
        foreach ($services as $service) {
            $methods = FactoryBuilder::createFactory($service, $this->containerConfiguration, $mappedInterfaces);
            $name = $service->getName();
            list($typeOfService, $additionalData) = FactoryBuilder::getTypeOfService($service);
            switch ($typeOfService) {
                case FactoryBuilder::SERVICE:
                    $servicesNames[] = $name;
                    break;
                case FactoryBuilder::CONTROLLER:
                    $controllersNames[$additionalData] = $name;
                    break;
                case FactoryBuilder::COMMAND:
                    $commandsNames[$additionalData] = $name;
                    break;
            }
            foreach ($methods as $method) {
                $class->addMember($method);
            }
        }

        $servicesNames[] = ContainerInterface::class;
        $servicesNames[] = AppConfiguration::class;
        return [$servicesNames, $controllersNames, $commandsNames];
    }

    private function deleteOldContainerHelper(): void
    {
        try {
            if ($this->containerHelperFileExists()) {
                unlink($this->getContainerHelperPath());
            }
        } catch (Exception $e) {
            throw new ContainerGeneratorException(
                'Fox Framework do not have permissions to do changes in 
                application tmp folder! Please check the permissions');
        }
    }
}
